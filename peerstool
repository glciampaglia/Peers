#!/usr/bin/python

''' Frontend to the `peers` package'''

import sys
from textwrap import wrap
from argparse import ArgumentParser, Action, REMAINDER, _HelpAction
from peers.utils import ttysize

commands = {
        'peers' : (
            'peers.peers', 
            'simulate the model'
            ),
        'effectplot' : ( 
            'peers.gsa.effectplot', 
            'produce main and interaction effect plots'
            ),
        'vardec' : (
            'peers.gsa.vardec', 
            'compute main and total interaction effect sensitivity indices'
            ),
        'pcc' : (
            'peers.gsa.pcc',
            'computes partial correlation sensitivity indices'
            ),
        'regr' : (
            'peers.gsa.regression',
            'computes standardized regression coefficients sensitivity indices'
            ),
        'lhd' : (
            'peers.design.lhd',
            'latin hypercube design'
            ),
        'winding' : (
            'peers.design.winding',
            'winding stairs design'
            ),
        'jobs' : (
            'peers.jobs',
            'template-based command line builder'
            ),
        'pexec' : (
            'peers.pexec',
            'parallel execution script'
            ),
        'lt' : (
            'peers.lt',
            'post-processing script',
            ),
        'stats' : (
            'peers.stats',
            'plots lifetime statistics'
            ),
        'diagnostics' : (
            'peers.diagnostics',
            'plots active users/pages during a simulation'
            ),
        'gmm' : (
            'peers.fit.gmm',
            'fits data to a GMM'
            ),
        'gpfit1d' : (
            'peers.fit.gpfit1d',
            'fits data to a GP surrogate model'
            ),
        'sigmoid' : (
            'peers.fit.sigmoid',
            'fits data to a sigmoid function'
        ),
        'parametric_plot' : (
            'peers.fit.parametricplot',
            'produces a parametric plot of GMM sufficient statistics'
        ),
        'calibration' : (
            'peers.fit.calibration',
            'model calibration'
        ),
        'emresid' : (
            'peers.fit.emresid',
            'EM residuals'
        ),
        'bootstrap' : (
            'peers.fit.bootstrap',
            'GMM fit and bootstrap'
        ),
        'truncated' : (
            'peers.fit.truncated',
            'truncated GMM fit'
        )
}

class _HelpCommandsAction(_HelpAction):
    '''
    Extended _HelpAction class that prints a list of available commands 
    '''
    def __call__(self, parser, namespace, values, option_string=None):
        try:
            super(_HelpCommandsAction, self).__call__(parser, namespace, values,
                    option_string)
        except SystemExit:
            # catch the SystemExit raised by super-class
            pass
        print
        print 'Available commands:'
        print
        h, w = ttysize() or (40, 85)
        M = max(map(len, commands)) + 1
        sep = ' '
        for cmd, (fqmn, helptext) in sorted(commands.items()):
            lines = wrap(helptext, w - M - len(sep))
            print ' ' + cmd.ljust(M) + sep + lines[0]
            if len(lines) > 1:
                for l in lines[1:]:
                    print ' ' * (M + len(sep) + 1) + l
        print
        sys.exit(2)

def make_parser():
    parser = ArgumentParser(description=__doc__, add_help=False)
    parser.add_argument('command', choices=commands.keys())
    parser.add_argument('rest', nargs=REMAINDER)
    parser.add_argument('-h', '--help', action=_HelpCommandsAction, 
            help='print this message and exits')
    parser.add_argument('-D', '--debug', action='store_true', help='raise '
            'Python exceptions to the console')
    return parser

def main(ns):
    cmd, desc = commands[ns.command]
    module = __import__(cmd, fromlist=['*'])
    cmd_parser = module.make_parser()
    cmd_parser.prog += ' ' + ns.command
    cmd_ns = cmd_parser.parse_args(ns.rest)
    res = module.main(cmd_ns)

if __name__ == '__main__':
    parser = make_parser()
    ns = parser.parse_args()
    try:
        main(ns)
    except:
        ty,val,tb = sys.exc_info()
        if ns.debug:
            raise ty, val, tb
        else:
            if ty is SystemExit:
                raise
            if ty is KeyboardInterrupt:
                print '^C'
                sys.exit(1)
            name = ty.__name__
            parser.error('%s : %s' % (name, val))
    
